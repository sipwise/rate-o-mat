#!/bin/sh
### BEGIN INIT INFO
# Provides:          rate-o-mat
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Should-Start:      mysql
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Init script for rate-o-mat
# Description:       TODO
### END INIT INFO

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="rate-o-mat"
NAME=rate-o-mat
PACKAGE=ngcp-rate-o-mat
INTERP=/usr/bin/perl
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$PACKAGE

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
if [ -r /etc/default/$PACKAGE ]; then
        . /etc/default/$PACKAGE
else
        echo "$NAME: Missing configuration file /etc/default/$PACKAGE, not starting."
        exit 0
fi


# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	if [ "$RATEOMAT_RUN" = "no" ];then
		echo "$NAME disabled. Not starting."
		exit 0
	fi

	if [ -x "/usr/sbin/ngcp-check_active" ]; then
	  /usr/sbin/ngcp-check_active -q
	  status=$?
	  case "${status}" in
	    0|3)
	      echo "Active node or transition."
	      ;;
	    *)
	      echo "Ignored start action in inactive node ($status)"
	      exit 0
	      ;;
	  esac
	fi

	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --test \
	  --pidfile $PIDFILE --exec $INTERP --name $NAME --startas $DAEMON >/dev/null \
		|| return 1
	start-stop-daemon --start --quiet \
	  --pidfile $PIDFILE --exec $INTERP --name $NAME --startas $DAEMON \
	  -- $DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \
	  --pidfile $PIDFILE --exec $INTERP --name $NAME
	[ "$?" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --retry=0/30/KILL/5 --oknodo \
	  --pidfile $PIDFILE --exec $INTERP --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# daemon doesn't delete its pidfile when it exits
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
	start-stop-daemon --stop --signal 1 --quiet \
	  --pidfile $PIDFILE --exec $INTERP --name $NAME
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"

	# check for already running daemon, don't start more than once
	# but return with exit code 0 as requested by LSB
	if status_of_proc "$DAEMON" "$NAME" >/dev/null 2>&1 ; then
		[ "$VERBOSE" != no ] && log_daemon_msg "$DESC already running, not starting again" "ok"
		[ "$VERBOSE" != no ] && log_end_msg 0
		exit 0
	fi

	do_start
	RETVAL="$?"
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	exit "$RETVAL"
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	RETVAL="$?"
	case "$RETVAL" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	exit "$RETVAL"
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac
